{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","editButton","inputPhoto","saveButton","postsBlock","posts","postsDev","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","style","marginTop","fontSize","fontWeight","onDoubleClick","onChange","e","target","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","profile","handleSubmit","error","onSubmit","className","margin","formSummaryError","createField","Input","ProfileStatus","Textarea","keys","contacts","map","key","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","type","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","Post","message","likesCount","MyPosts","postsElements","toConsumableArray","reverse","post","MyPosts_Post_Post","id","MyPosts_AddNewPostForm_AddNewPostForm","values","addPost","newPostText","React","memo","MyPostsContainer","connect","state","profilePage","actions","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","userId","params","authorizedUserId","navigate","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","Component","compose","auth","isAuth","WrappedComponent","useParams","useNavigate"],"mappings":"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","file":"static/js/1.5ca5f889.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2xYGy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2c0EC\",\"contact\":\"ProfileInfo_contact__38m9h\",\"editButton\":\"ProfileInfo_editButton__1sXWh\",\"inputPhoto\":\"ProfileInfo_inputPhoto__1V8iH\",\"saveButton\":\"ProfileInfo_saveButton__2M1b6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1yk8U\",\"posts\":\"MyPosts_posts__2ibhY\",\"postsDev\":\"MyPosts_postsDev__2nlMN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1TVmr\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n const ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n     let [editMode, setEditMode] = useState(false);\r\n     let [status, setStatus] = useState(props.status)\r\n\r\n     useEffect(() => {\r\n         setStatus(props.status)\r\n     }, [props.status])\r\n\r\n     const activateEditMode = () => {\r\n         setEditMode(true)\r\n     }\r\n\r\n\r\n     const deactivateEditMode = () => {\r\n         setEditMode(false)\r\n         props.updateStatus(status)\r\n     }\r\n\r\n     const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setStatus(e.target.value)\r\n     }\r\n\r\n     return (\r\n         <div>\r\n             {!editMode &&\r\n                 <div style={{marginTop: '5px'}}>\r\n                     <div style={{fontSize: '15px', fontWeight: '400'}} onDoubleClick={activateEditMode}>{props.status || '------'}</div>\r\n                 </div>\r\n             }\r\n             {editMode &&\r\n                 <div>\r\n                     <input onChange={onStatusChange} autoFocus={true}\r\n                            onBlur={deactivateEditMode} value={status}/>\r\n                 </div>\r\n             }\r\n         </div>\r\n     )\r\n }\r\n\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatus\";\r\nimport {createField, GetStringKeysType, Input, Textarea} from \"../../common/FormsControl/FormsControl\";\r\n\r\nimport style from \"../../common/FormsControl/FormsControl.module.css\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileKeysType = GetStringKeysType<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, status, updateStatus, handleSubmit, error}) => {\r\n    return  (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={style.saveButton}>\r\n                <button style={{margin: '5px'}}>Save</button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n                }\r\n                <div>\r\n                {createField<ProfileKeysType>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                {createField<ProfileKeysType>(\"Looking for a job\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField<ProfileKeysType>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>My links</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={style.contact}>\r\n                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport style from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatus\";\r\nimport userPhoto from '../../../assets/images/icon-256x256.png';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst ProfileInfo:React.FC<PropsType> = ({profile, isOwner, savePhoto, status, updateStatus, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then (\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n    <div className={style.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={style.mainPhoto}/>\r\n        {isOwner && <input className={style.inputPhoto} type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n        { editMode\r\n            ? <ProfileDataForm  initialValues={profile} profile={profile} status={status}\r\n                                      updateStatus={updateStatus} onSubmit={onSubmit}/>\r\n            : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile}\r\n                           status={status} updateStatus={updateStatus} isOwner={isOwner}/> }\r\n\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType> = ({profile, status, updateStatus, isOwner, goToEditMode}) => {\r\n    return  (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button className={style.editButton} onClick={goToEditMode}>Edit profile info</button> </div>}\r\n        <div style={{fontSize: '20px'}}>\r\n           {profile.fullName}\r\n        </div>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        <div style={{marginTop: '5px'}}>\r\n            <b>Looking for a job</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n            <div style={{marginTop: '5px'}}>\r\n                <b >About me</b>: {profile.aboutMe}\r\n            </div>\r\n        <div style={{marginTop: '5px'}}>\r\n            <b>My links</b>: {Object\r\n            .keys(profile.contacts)\r\n            .map(key => {\r\n            return <Contact  key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n    )}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={style.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src='https://cdn-icons-png.flaticon.com/512/53/53104.png'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import { InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeysType,  Textarea} from \"../../../common/FormsControl/FormsControl\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesKeysType = GetStringKeysType<AddPostFormValuesType>\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesKeysType>('Your post', 'newPostText', [],  Textarea)}\r\n            </div>\r\n            <div style={{marginTop: '5px'}}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType,PropsType >({form: 'profileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPostForm/AddNewPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type StatePropsType = {\r\n    posts: Array<PostType>\r\n\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts:React.FC<StatePropsType &  DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(post => <Post key={post.id} message={post.message} id={post.id} likesCount={post.likesCount}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h1 className={style.postsDev}>IN DEVELOPMENT STAGE</h1>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onAddPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, StatePropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst MyPostsContainer = connect<StatePropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPost\r\n}) (MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto, saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {NavigateFunction, useNavigate, useParams} from \"react-router\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\nconst withRouter = (WrappedComponent: React.ComponentType) => (props:any) => {\r\n    const params = useParams();\r\n    const navigate = useNavigate();\r\n    return (\r\n        <WrappedComponent\r\n            {...props}\r\n            params={params}\r\n            navigate={navigate}\r\n\r\n        />\r\n    );\r\n};\r\n\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n     getStatus: (userId: number) => void\r\n     updateStatus: (status: string) => void\r\n     savePhoto: (file: File) => void\r\n     saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\ntype PropsType = StatePropsType & DispatchPropsType & {\r\n    navigate: NavigateFunction\r\n    params: {\r\n        userId: string\r\n    }\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.navigate('/login')\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.params.userId !== prevProps.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     savePhoto={this.props.savePhoto}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n) (ProfileContainer);"],"sourceRoot":""}