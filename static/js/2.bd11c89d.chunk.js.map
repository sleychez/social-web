{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","dialog","DialogItem","props","path","id","react_default","a","createElement","className","style","dist","to","divData","isActive","name","Message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","map","Dialogs_DialogItem_DialogItem","key","messagesElements","Dialogs_Message_Message","Dialogs_AddMessageForm_AddMessageForm","values","sendMessage","newMessageBody","compose","connect","Object","objectSpread","actions"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,yBAAAC,OAAA,iICqBHC,EAbwB,SAACC,GAEpC,IAAIC,EAAO,WAAaD,EAAME,GAE9B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMT,QAClBK,EAAAC,EAAAC,cAACG,EAAA,EAAO,CAACC,GAAIR,EAAMK,UAAY,SAAAI,GAAO,OAAIA,EAAQC,SAAWJ,IAAMZ,OAASY,IAAMT,SAAUE,EAAMY,QCE/FC,EARsB,SAACb,GAClC,OACAG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMT,QAASE,EAAMH,oCCLnCiB,EAAcC,YAAiB,IAkBtBC,cAAoC,CAACC,KAAM,wBAA3CD,CAbsF,SAAChB,GAClG,OACIG,EAAAC,EAAAC,cAAA,QAAMa,SAAUlB,EAAMmB,cAClBhB,EAAAC,EAAAC,cAAA,WACKe,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEhHnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BC2BDkB,EA1BsB,SAACvB,GAElC,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAM/B,QAAQkC,IAAI,SAAC7B,GAAM,OAAKK,EAAAC,EAAAC,cAACuB,EAAU,CAAChB,KAAMd,EAAOc,KAAMiB,IAAK/B,EAAOI,GAAIA,GAAIJ,EAAOI,OAC1G4B,EAAmBN,EAAM5B,SAAS+B,IAAI,SAAC9B,GAAO,OAAKM,EAAAC,EAAAC,cAAC0B,EAAO,CAAClC,QAASA,EAAQA,QAASK,GAAIL,EAAQK,GAAI2B,IAAKhC,EAAQK,OAMvH,OACIC,EAAAC,EAAAC,cAAA,OAAMC,UAAWC,IAAMd,SACnBU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMb,cACjBgC,GAELvB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,UAClBO,EAAAC,EAAAC,cAAA,WAAMyB,IAGV3B,EAAAC,EAAAC,cAAC2B,EAAc,CAACd,SAbJ,SAACe,GACjBjC,EAAMkC,YAAYD,EAAOE,qCCdlBC,sBACXC,YAPoB,SAACb,GACrB,MAAO,CACHC,YAAaD,EAAMC,cAKCa,OAAAC,EAAA,EAAAD,CAAA,GAAKE,MADlBJ,CAEbb","file":"static/js/2.bd11c89d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1VYuV\",\"dialogsItems\":\"Dialogs_dialogsItems__3YmzN\",\"active\":\"Dialogs_active__FHtBl\",\"messages\":\"Dialogs_messages__1AYml\",\"message\":\"Dialogs_message__2u29j\",\"dialog\":\"Dialogs_dialog__1aEx8\"};","import React from \"react\";\r\nimport style from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> = (props) => {\r\n\r\n    let path = 'dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={path} className={ divData => divData.isActive ? style.active : style.dialog }>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from './../Dialogs.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n    <div className={style.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../common/FormsComtrol/FormsControl\";\r\nimport React from \"react\";\r\nimport { NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport style from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messagesElements = state.messages.map((message) => <Message message={message.message} id={message.id} key={message.id}/>)\r\n\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div  className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"../../components/Dialogs/Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions})\r\n)(Dialogs);"],"sourceRoot":""}